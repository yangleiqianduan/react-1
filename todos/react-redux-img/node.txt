https://blog.csdn.net/tangzhl/article/details/78177814
https://blog.csdn.net/luke_up/article/month/2017/02


React-redux
通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测

问题：
state 目前如何存储？

组件如何访问自己的state？

组件如何向父组件传递state？


const store = createStore(rootReducer)
核心概念

Action:
Action 是把数据从应用（译者注：这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。

Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。


展示组件：它们只是普通的 React 组件

容器组件：容器组件把这些展示组件和 Redux 关联起来。技术上讲，容器组件就是使用 store.subscribe() 从 Redux state 树中读取部分数据，并通过 props 来把这些数据提供给要渲染的组件。你可以手工来开发容器组件，但建议使用 React Redux 库的 connect() 方法来生成，这个方法做了性能优化来避免很多不必要的重复渲染。

我现在得到的结果是 显示组件需要依赖于容器组件和Redux进行关联，容器组件的产生是通过connect()方法。

使用 connect() 前，需要先定义 mapStateToProps 这个函数来指定如何把当前 Redux store state 映射到展示组件的 props 中。例如，VisibleTodoList 需要计算传到 TodoList 中的 todos，所以定义了根据 state.visibilityFilter 来过滤 state.todos 的方法，并在 mapStateToProps 中使用。



ToDo list:


思想：

以前的state是每个组件自己的私有属性，自己控制。但是react-redux会将state提出来为一个全局共有的属性。每个组件都会去访问。
这里我思考了一个问题？ 现在我们所说的state tree和组件自己的state真的有很大关系吗？

我的理解是：在组件本身state没有其他组件交互的情况下，那么我还需要使用redux吗？我目前的想法是不用，那么react-redux的意义是什么吗？我认为是一种解决组件交互时的数据传送的问题。所以我们在考虑state tree（使用react-redux的情况下称为state tree）不要非把state（组建自身的state）给屏蔽掉，就将state tree看做是一种第三方用于组件数据通信的工具。

ok，我们上面对当前的react-redux的定性有了一个大概的印象。然后现在我们需要思考如何在当前组件上去实现啊这个功能。

1. 首先是当前我们使用的一切state数据都是在组件中，但是state tree是一个脱离当前项目的第三方工具。我们的大问题是如何将组件与react-redux联系起来。

(1). 宏观问题：组件与state tree如何通信？
我们想象一下使用jquery的时候如何使用的，jquer对象是一个全局的对象，当我们使用的时候就是直接使用$ / Jquery对象去使用了。同样的组件与state tree的时候也是一样：
get data： 直接从state tree中拿出数据。
set data： 就是执行state tree暴露出来的方法去进行数据操作。

上面的内容应该不难理解吧。

(2). state tree暴露给组件的东西是什么呢？
为什么会以有这种问题呢？因为js中像这种稍微复杂的操作基本上都是一种闭包的形式去构成复杂的对象，然后暴露出允许的api去进行数据操作。


相信大家看过一些react-redux的文档，都知道核心概念是action & reducer。这二者怎么理解呢？
我的理解是： 当前state tree是一种给与系统自己去定义操作的第三方工具。因为系统不知道你的数据是什么？不知道你的数据会有什么样的操作去进行数据操作。说到这里，你应该想到了吧，就是当前state tree想给与一个系统提供服务，但是具体当前系统的服务有什么，它是不知道的。所以他定义了两个概念。action就相当于对象中的key，reducer就是具体的value （这里的value一般是一种方法，因为是一种方法去操作state tree的数据）。因为只有我们系统定义了key：value，当前系统运行的时候我们就有了具体的操作api了。


(3). 组件如何能够通过操作相应的action去与state tree交互？

react-redux为了将概念分清楚，定义了两种组件概念：

举个例子：假如我们有数据是存储在state tree中的，拿到数据之后我们需要将数据在组件中显示出来。

普通组件： 和原先的组件相同。这里对应上面的例子就是拿到数据之后的操作，注意是拿到数据之后操作。

容器组件： 对应那数据之前的操作都是在容器组件中操作的。就是取数据的过程。因为对于容器组件的定义是讲普通组件与react-redux联系起来，也就是前面说的两点，系统发送action与请求数据都是在这个容器组件中进行的。

个人理解： 其实这样的话会将一个原先组件整体划分开来，个人目前还是不认可这种操作（可能还没有熟悉人家的操作方式），将组件划分的太开，其实不利于维护吧，当然都是个人拙见，因为目前还没那个水平去思考人家的这种实现操作。

举例： 

(4). 如何让我们的系统认可容器组件的存在？
为什么会有这个问题呢？ 因为当前我们前面的说明还是在应用上，但是对于当前react系统还没有识别react-redux的操作。这也是很关键的一步。

  <Provider store={store}>
    <App />
  </Provider>

  <Provider store> 使组件层级中的 connect() 方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 <Provider> 中才能使用 connect() 方法。

(5). 前面的action reducer如何在state tree中起到作用的，也就是我们定义的操作如何被react-redux存储在自己的闭包环境？
 为什么有这个问题呢？因为首先应用react-redux的系统中有对应的代码，二那，也是一种简单研读react-redux的源码过程。

import React from 'react'
import { render } from 'react-dom'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import App from './components/App'
import rootReducer from './reducers'

const store = createStore(rootReducer)

render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

主要是上面的这行代码：

const store = createStore(rootReducer)

a. const store = createStore(rootReducer) 

b. 先看rootReducer的返回值：
export default combineReducers({
  todos,
  visibilityFilter
})

c. combineReducers (combineReducers)：

export default function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);    //获取自有属性中枚举属性的合集字符串， 这里只有我们传进的 ["todos", "visibilityFilter"]
  var finalReducers = {};                     //过滤后的可用 reducer 
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        warning('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];              // (闭包作用域) finalReducers 浅复制reducers
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);   // (闭包作用域) finalReducerKeys 存储reducers的key集合

  var unexpectedKeyCache = void 0;                     // 防止undefined被重写而出现判断不准确的情况
  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);                // 判断reducer是否规范，调到步骤d
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {                     // 返回一个function，形成闭包，给大家看一下当前闭包环境的作用域 ： 如下图：
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}


闭包环境私有作用域图：然后调到e



d。 assertReducerShape
function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) { //遍历reducers 集合
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: ActionTypes.INIT }); //执行reducer[key]方法，判断是否有正确的返回值

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');  //判断随机的action reducers是否返回可控的数据。
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

执行之后返回c.

e. 回到a步骤执行createStore(rootReducer) 
这里传进来的是上面d步骤返回的function。下面大部分内容都是function，可以直接转到dispatch({ type: ActionTypes.INIT }); 那一行。

export default function createStore(reducer, preloadedState, enhancer) { //因为这里的后面两个参数为undefined，所以下面对于和这两个参数的内容跳过了。具体的后面参数的意义可以参照官方文档
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  function getState() {
    return currentState;
  }

  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);   //初始化state，执行我们传进来的步骤d返回的reducer function. 请调到f.
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[$$observable] = function () {
      return this;
    }, _ref;
  }

  dispatch({ type: ActionTypes.INIT });  //执行初始化state操作

  return _ref2 = {  //返回一个对象，此时我们再看一下当前的作用域的值如下图：
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}


如下图： 红色框中的图是返回对象的闭包作用域，绿色框是暴露出来的API。然后初始化就走完了。


f. return function combination()： 
return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};   //初始化state为[].
    var action = arguments[1];  // {type：“@@redux/INIT”}

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {  //遍历所有可用 reducer对象，然后执行reducer获取初始化状态，finalReducerKeys 为可用 reducer 的 key 值数组  
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];       		//通过 key 值找到对应的 reducer     
      var previousStateForKey = state[_key];   		//获取当前reducer的 state，作为下行代码执行reducer函数的 initialState           
      var nextStateForKey = reducer(previousStateForKey, action); //获取初始化状态  
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey; // 判断状态是否改变，返回对象的状态  
    }
    return hasChanged ? nextState : state;
  };

(6) 项目中发送action的过程：

dispatch(addTodo(input.value))